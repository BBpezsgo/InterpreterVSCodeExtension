{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "BBC Language",
	"scopeName": "source.bbc",
	"patterns": [
		{
			"include": "#string"
		},
		{
			"include": "#hash"
		},
		{
			"include": "#number"
		},
		{
			"include": "#struct-def"
		},
		{
			"include": "#func-def-2"
		},
		{
			"include": "#func-def"
		},
		{
			"include": "#using"
		},
		{
			"include": "#var-def"
		},
		{
			"include": "#new-struct"
		},
		{
			"include": "#func-call"
		},
		{
			"include": "#attr0"
		},
		{
			"include": "#attr1"
		},
		{
			"include": "#statement"
		},
		{
			"include": "#builtin-function"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"hash": {
			"patterns": [
				{
					"match": "^#[\\s]*[a-zA-Z0-9]*\\s",
					"name": "constant.language"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"match": "\\breturn\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bif\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\belse\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\belseif\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bwhile\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bfor\\b",
					"name": "keyword.control"
				}
			]
		},
		"builtin-function": {
			"patterns": [
				{
					"match": "typeof",
					"name": "entity.name.tag"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"match": "\\/\\/[^\\n]*\\n",
					"name": "comment.line"
				},
				{
					"match": "\\/\\*[\\s\\S]*\\*\\/",
					"name": "comment.block"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "[0-9]{1,}"
				},
				{
					"name": "constant.numeric",
					"match": "[0-9]*.[0-9]{1,}"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.double.ulog",
					"match": "\"[\\s\\S]*\""
				}
			]
		},
		"struct-def": {
			"match": "(struct)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				},
				"2": {	
					"name": "entity.name.class"
				}
			}
		},
		"func-def": {
			"match": "([a-zA-Z0-9_]+)(?<!new)[\\s]+([a-zA-Z0-9_]+)[\\s]*\\(",
			"captures": {
				"2": {	
					"name": "entity.name.function"
				}
			}
		},
		"func-def-2": {
			"match": "(void|int|bool|float|string)[\\s]+([a-zA-Z_0-9]+)[\\s]*\\(",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				},
				"2": {	
					"name": "entity.name.function"
				}
			}
		},
		"using": {
			"match": "(using)[\\s]*([a-zA-Z0-9\\._]+)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				},
				"2": {
					"name": "entity.name.namespace"
				}
			}
		},
		"var-def": {
			"match": "(var)[\\s]*([a-zA-Z]+)",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				}
			}
		},
		"new-struct": {
			"match": "(new)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				},
				"2": {	
					"name": "entity.name.class"
				}
			}
		},
		"attr0": {
			"match": "^[\\s]*\\[[\\s]*([a-zA-Z0-9_]+)[\\s]*\\]",
			"captures": {
				"1": {
					"name": "entity.name.class"
				}
			}
		},
		"attr1": {
			"match": "^[\\s]*\\[[\\s]*([a-zA-Z0-9_]+)[\\s]*(?=(\\s*\\([^\\)\\]]*\\)\\s*\\])[\\s]*)",
			"captures": {
				"1": {
					"name": "entity.name.class"
				}
			}
		},
		"keyword": {
			"patterns": [
				{
					"name": "entity.name.tag",
					"match": "\\bvoid\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bint\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bfloat\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bbool\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bstring\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\btrue\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bfalse\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bnamespace\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bthis\\b"
				}
			]
		}












		,
		"class": {
			"patterns": [
				{
					"match": "^\\[([a-zA-Z]*)\\] ",
					"captures": {
						"1": {	
							"name": "entity.name.class"
						}
					}
				},
				{
					"match": "^\\[([a-zA-Z]*)::([a-zA-Z]*)\\] ",
					"captures": {
						"1": {	
							"name": "entity.name.class"
						},
						"2": {	
							"name": "entity.name.class"
						}
					}
				},
				{
					"match": "^\\[([a-zA-Z]*)\\]: ",
					"captures": {
						"1": {	
							"name": "entity.name.class"
						}
					}
				}
			]
		},
		"link": {
			"name": "entity.name.tag",
			"match": "((https{0,1})(:\\/\\/)([\\w]+)(\\.)([\\w]+)(\\.[\\w]+)*((\\/)[\\w\\-]+){0,}(\\/){0,1}((\\?)[\\w\\_\\-]+(\\=)([\\w\\-\\+\\_]+\\+{0,1})+((\\&)[\\w\\_\\-]+(\\=)([\\w\\-\\+\\_]+))*){0,1}((\\#)[\\w\\-\\+\\_]*){0,1})"
		},
		"time": {
			"patterns": [
				{
					"name": "entity.name.tag",
					"match": "([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9])"
				},
				{
					"name": "entity.name.tag",
					"match": "([0-9]{6} [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2})"
				},
				{
					"name": "entity.name.tag",
					"match": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT"
				}
			]
		},
		"package": {
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "^\\    (com.(([a-z0-9-]*)\\.)*([a-z0-9-]*)@([0-9]*\\.)*([0-9]*))"
				}
			]
		},
		"file": {
			"patterns": [
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=Filename: )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*)(?= Line:)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=^WorkingDir: )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*)(?=\\n)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=^Starting: )([a-zA-Z0-9 ]*(:){0,}(\\\\[a-zA-Z0-9 .@_-]*)*)(?= --)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<= About to load )([a-zA-Z0-9 ]*(:){0,}(\\\\[a-zA-Z0-9 .@_-]*)*)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=at )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*:[0-9]*)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=\\(at )([a-zA-Z0-9 ]*(:){0,}(\\\\[a-zA-Z0-9 .@_-]*)*:[0-9]*)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=in )([a-zA-Z0-9 ]*(:){0,}(\\\\[a-zA-Z0-9 .@_-]*)*:[0-9]*) \\n"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<= CopyFiles )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*)(?=\n)"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=^Start importing )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*)(?= using )"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=^\\[)([A-Z]*(:){0,}(\\\\[a-zA-Z0-9 \\.@_\\-]*)*)(?= line )"
				},
				{
					"name": "string.quoted.double.ulog",
					"match": "(?<=Contents of )([A-Za-z0-9]*(:){0,}(\\\\[a-zA-Z0-9 \\.@_\\-]*)*)(?=\n)"
				},
				{
					"match": "(?<=^Start importing )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*)( & )([a-zA-Z0-9 ]*(:){0,}(\\/[a-zA-Z0-9 .@_-]*)*)(?= using )",
					"captures": {
						"1": {
							"name": "string.quoted.double.ulog"
						},
						"5": {
							"name": "string.quoted.double.ulog"
						}
					}
				}
			]
		},
		"scriptclass": {
			"patterns": [
				{
					"match": "^([a-zA-Z]*(\\.|:|(\\/<>)))*([a-zA-Z]*|(<.[a-z]*>([a-b0-9_]*))) ((\\()[^\\n]*(\\)))",
					"captures": {
						"0": {
							"name": "entity.name.class"
						},
						"2": {
							"name": "keyword.operator"
						},
						"3": {
							"name": "entity.name.tag"
						},
						"4": {
							"name": "entity.name.function"
						},
						"5": {
							"name": "entity.name.tag"
						},
						"6": {
							"name": "entity.name.function"
						},
						"7": {
							"name": "keyword.operator"
						}
					}
				},
				{
					"match": "  at (([a-zA-Z]{1,}\\.{1,2})*)([a-zA-Z]*) (\\()([a-zA-Z.0-9&`\\[\\] \\,]*)(\\))",
					"captures": {
						"1": {
							"name": "entity.name.class"
						},
						"3": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "  at (([a-zA-Z]\\.{0,1})*)(`[0-9]\\[([a-zA-Z,]*)\\]).([a-zA-Z]*) (\\()([a-zA-Z.0-9&`\\[\\] \\,]*)(\\))",
					"captures": {
						"1": {
							"name": "entity.name.class"
						},
						"4": {
							"name": "constant.regexp"
						},
						"5": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "  at (([a-zA-Z]{1,}\\.)*)([a-zA-Z]*)(\\+<>[a-z]\\.)((<\\.[a-z]*>)[a-z0-9_]*){0,1} (\\()([a-zA-Z.0-9&\\[\\] \\,]*)(\\))",
					"captures": {
						"1": {
							"name": "entity.name.class"
						},
						"3": {
							"name": "entity.name.class"
						},
						"4": {
							"name": "entity.name.class"
						},
						"5": {
							"name": "entity.name.function"
						},
						"6": {
							"name": "entity.name.tag"
						}
					}
				}
			]
		}
	}
}