{
	"scopeName": "source.bbc",
	"fileTypes": [
		"bbc"
	],
	"name": "BBC Language",
	"patterns": [
		{
			"include": "#strings"
		},
		{
			"include": "#hash"
		},
		{
			"include": "#number"
		},
		{
			"include": "#struct-def"
		},
		{
			"include": "#class-def"
		},
		{
			"include": "#namespace-def"
		},
		{
			"include": "#func-def-2"
		},
		{
			"include": "#func-def"
		},
		{
			"include": "#using"
		},
		{
			"include": "#var-def"
		},
		{
			"include": "#new-struct"
		},
		{
			"include": "#statement"
		},
		{
			"include": "#func-call"
		},
		{
			"include": "#attribute"
		},
		{
			"include": "#builtin-function"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"hash": {
			"patterns": [
				{
					"match": "^#[\\s]*[a-zA-Z0-9]*\\s",
					"name": "constant.language"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"match": "\\breturn\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bthrow\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bif\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\belse\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\belseif\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bwhile\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bfor\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bbreak\\b",
					"name": "keyword.control"
				}
			]
		},
		"builtin-function": {
			"patterns": [
				{
					"match": "typeof",
					"name": "entity.name.tag"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"match": "\\/\\/[^\\n]*\\n",
					"name": "comment.line"
				},
				{
					"match": "\\/\\*[\\s\\S]*\\*\\/",
					"name": "comment.block"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "(\\.[0-9]+f?\\b|\\b[0-9]+f?\\b|\\b0x[0-9a-fA-F_]+\\b|\\b0b[01_]+\\b|\\b[0-9]e[0-9]f?\\b)"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.double.ulog",
					"match": "\"[\\s\\S]*\""
				}
			]
		},
		"struct-def": {
			"match": "(struct)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				},
				"2": {
					"name": "entity.name.class"
				}
			}
		},
		"class-def": {
			"match": "(class)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				},
				"2": {
					"name": "entity.name.class"
				}
			}
		},
		"namespace-def": {
			"match": "(namespace)\\s+([a-zA-Z_]+[a-zA-Z0-9_]*)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				},
				"2": {
					"name": "entity.name.class"
				}
			}
		},
		"func-def": {
			"match": "(([a-zA-Z]+[a-zA-Z0-9_]*)[\\[\\]]*)(?<!new|return) \\s*([a-zA-Z_]+[a-zA-Z0-9_])\\(",
			"captures": {
				"2": {
					"name": "entity.name.class"
				},
				"3": {
					"name": "entity.name.function"
				}
			}
		},
		"func-def-2": {
			"match": "((void|int|byte|float|bool|string)([\\[\\]]*)) \\s*([a-zA-Z_]+[a-zA-Z0-9_])\\(",
			"captures": {
				"2": {
					"name": "entity.name.tag"
				},
				"4": {
					"name": "entity.name.function"
				}
			}
		},
		"using": {
			"match": "(using)[\\s]+",
			"captures": {
				"1": {
					"name": "keyword.control"
				}
			}
		},
		"var-def": {
			"match": "(var)[\\s]+([a-zA-Z]+)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				}
			}
		},
		"new-struct": {
			"match": "(new)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				},
				"2": {
					"name": "entity.name.class"
				}
			}
		},
		"attribute": {
			"match": "\\s\\[\\s*(\\w+)\\s*(\\]|\\()",
			"captures": {
				"1": {
					"name": "entity.name.class"
				}
			}
		},
		"keyword": {
			"match": "\\b(void|int|byte|float|bool|string|true|false|namespace|export|this)\\b",
			"name": "entity.name.tag"
		},
		"func-call": {
			"patterns": [
				{
					"match": "(?<!\\[)\\b([a-zA-Z_]+[a-zA-Z0-9_]*)\\b\\s*\\(",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.bbc"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.bbc"
						}
					},
					"name": "string.quoted.double.bbc",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.bbc"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.bbc"
						}
					},
					"name": "string.quoted.single",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\(\\\\|[ntr\\\"]|(u[0-9a-fA-F]{4}))",
					"name": "constant.character.escape.bbc"
				},
				{
					"match": "\\\\(u[0-9a-zA-Z]{4}|.)",
					"name": "invalid.illegal.unknown-escape.bbc"
				}
			]
		}
	}
}