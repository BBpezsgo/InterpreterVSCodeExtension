{
	"name": "BBC Language",
	"scopeName": "source.bbc",
	"patterns": [
		{
			"include": "#string"
		},
		{
			"include": "#hash"
		},
		{
			"include": "#number"
		},
		{
			"include": "#struct-def"
		},
		{
			"include": "#func-def-2"
		},
		{
			"include": "#func-def"
		},
		{
			"include": "#using"
		},
		{
			"include": "#var-def"
		},
		{
			"include": "#new-struct"
		},
		{
			"include": "#statement"
		},
		{
			"include": "#func-call"
		},
		{
			"include": "#attr0"
		},
		{
			"include": "#attr1"
		},
		{
			"include": "#builtin-function"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"hash": {
			"patterns": [
				{
					"match": "^#[\\s]*[a-zA-Z0-9]*\\s",
					"name": "constant.language"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"match": "\\breturn\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bif\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\belse\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\belseif\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bwhile\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bfor\\b",
					"name": "keyword.control"
				},
				{
					"match": "\\bbreak\\b",
					"name": "keyword.control"
				}
			]
		},
		"builtin-function": {
			"patterns": [
				{
					"match": "typeof",
					"name": "entity.name.tag"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"match": "\\/\\/[^\\n]*\\n",
					"name": "comment.line"
				},
				{
					"match": "\\/\\*[\\s\\S]*\\*\\/",
					"name": "comment.block"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "[0-9]{1,}"
				},
				{
					"name": "constant.numeric",
					"match": "[0-9]*.[0-9]{1,}"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.double.ulog",
					"match": "\"[\\s\\S]*\""
				}
			]
		},
		"struct-def": {
			"match": "(struct)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				},
				"2": {	
					"name": "entity.name.class"
				}
			}
		},
		"func-def": {
			"match": "([a-zA-Z0-9_]+)(?<!new)[\\s]+([a-zA-Z0-9_]+)[\\s]*\\(",
			"captures": {
				"2": {	
					"name": "entity.name.function"
				}
			}
		},
		"func-def-2": {
			"match": "(void|int|bool|float|string)[\\s]+([a-zA-Z_0-9]+)[\\s]*\\(",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				},
				"2": {	
					"name": "entity.name.function"
				}
			}
		},
		"using": {
			"match": "(using)[\\s]*([a-zA-Z0-9\\._]+)",
			"captures": {
				"1": {
					"name": "entity.name.tag"
				},
				"2": {
					"name": "entity.name.namespace"
				}
			}
		},
		"var-def": {
			"match": "(var)[\\s]*([a-zA-Z]+)",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				}
			}
		},
		"new-struct": {
			"match": "(new)[\\s]+([a-zA-Z0-9_]+)",
			"captures": {
				"1": {	
					"name": "entity.name.tag"
				},
				"2": {	
					"name": "entity.name.class"
				}
			}
		},
		"attr0": {
			"match": "^[\\s]*\\[[\\s]*([a-zA-Z0-9_]+)[\\s]*\\]",
			"captures": {
				"1": {
					"name": "entity.name.class"
				}
			}
		},
		"attr1": {
			"match": "^[\\s]*\\[[\\s]*([a-zA-Z0-9_]+)[\\s]*(?=(\\s*\\([^\\)\\]]*\\)\\s*\\])[\\s]*)",
			"captures": {
				"1": {
					"name": "entity.name.class"
				}
			}
		},
		"keyword": {
			"patterns": [
				{
					"name": "entity.name.tag",
					"match": "\\bvoid\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bint\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bfloat\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bbool\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bstring\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\btrue\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bfalse\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bnamespace\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bthis\\b"
				},
				{
					"name": "entity.name.tag",
					"match": "\\bexport\\b"
				}
			]
		},
		"func-call": {
			"patterns": [
				{
					"match": "(?<!\\[)\\b([a-zA-Z0-9_]+)\\b\\s*\\(",
					"captures": {
						"1": {	
							"name": "entity.name.function"
						}
					}
				}
			]
		}
	}
}